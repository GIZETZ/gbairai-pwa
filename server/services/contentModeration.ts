import { containsBannedWords, getFoundBannedWords } from "@shared/blacklist";

export interface ModerationResult {
  approved: boolean;
  reason?: string;
  foundWords?: string[];
  suggestion?: string;
}

// Messages de refus dans le style ivoirien
const rejectionMessages = [
  "Yako, ce message est trop chaud pour Gbairai üòÖ !",
  "Gbairai c'est pas pour les palabres ! Reviens quand t'es calm√© üòé",
  "Eh non ami, on dit pas √ßa sur Gbairai ! Change ton message üôè",
  "Fr√®re, ce gbairai l√† est pas bon ! Trouve autre chose √† dire üí≠",
  "Ton message est trop fort ! Gbairai c'est pour les bonnes vibes seulement ‚ú®",
  "√áa va pas marcher comme √ßa ! √âcris quelque chose de bien üìù",
  "On peut pas publier √ßa sur Gbairai ! Essaie avec des mots plus doux üå∏"
];

// Fonction pour obtenir un message de refus al√©atoire
const getRandomRejectionMessage = (): string => {
  return rejectionMessages[Math.floor(Math.random() * rejectionMessages.length)];
};

// Mod√©ration locale avec la liste noire
export const checkLocalModeration = (content: string): ModerationResult => {
  const foundWords = getFoundBannedWords(content);
  
  if (foundWords.length > 0) {
    return {
      approved: false,
      reason: getRandomRejectionMessage(),
      foundWords,
      suggestion: "Utilise des mots plus respectueux pour exprimer ton gbairai"
    };
  }
  
  return { approved: true };
};

// Mod√©ration avanc√©e avec OpenRouter AI
export const checkAIModeration = async (content: string): Promise<ModerationResult> => {
  try {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENROUTER_CHECK_WORD}`,
        "Content-Type": "application/json",
        "HTTP-Referer": "https://gbairai.app",
        "X-Title": "Gbairai Content Moderation"
      },
      body: JSON.stringify({
        model: "openai/gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: `Tu es une IA de mod√©ration pour Gbairai, un r√©seau social ivoirien. Ta mission est d'analyser le contenu des messages et de d√©terminer s'ils respectent les r√®gles de bonne conduite.

R√àGLES DE MOD√âRATION:
- Bloque tout contenu offensant, vulgaire, haineux ou irrespectueux
- Bloque les contenus sexuels explicites, violents ou li√©s aux drogues
- Bloque les discriminations, le harc√®lement et les menaces
- Respecte la culture ivoirienne et l'usage du nouchi/argot local quand c'est respectueux
- Sois tol√©rant avec l'humour ivoirien tant qu'il reste respectueux

R√âPONSE ATTENDUE:
R√©ponds UNIQUEMENT par un JSON avec cette structure:
{
  "approved": boolean,
  "toxicity_score": number (0-1),
  "reason": "explication courte si refus√©",
  "category": "type de probl√®me si refus√©"
}

Si le message est acceptable, r√©ponds: {"approved": true, "toxicity_score": 0.1}
Si le message est probl√©matique, donne une raison claire et un score de toxicit√©.`
          },
          {
            role: "user",
            content: `Analyse ce message: "${content}"`
          }
        ],
        max_tokens: 200,
        temperature: 0.1
      })
    });

    if (!response.ok) {
      console.error("Erreur OpenRouter:", response.status, response.statusText);
      return { approved: true }; // En cas d'erreur API, on approuve pour ne pas bloquer
    }

    const data = await response.json();
    const aiResponse = data.choices[0]?.message?.content;
    
    if (!aiResponse) {
      return { approved: true };
    }

    // Parse la r√©ponse JSON de l'IA
    try {
      const result = JSON.parse(aiResponse);
      
      if (!result.approved) {
        return {
          approved: false,
          reason: getRandomRejectionMessage(),
          suggestion: result.reason || "Contenu inappropri√© d√©tect√© par l'IA"
        };
      }
      
      return { approved: true };
    } catch (parseError) {
      console.error("Erreur parsing r√©ponse IA:", parseError);
      return { approved: true };
    }

  } catch (error) {
    console.error("Erreur mod√©ration AI:", error);
    return { approved: true }; // Fallback en cas d'erreur
  }
};

// Fonction principale de mod√©ration (combine local + AI)
export const moderateContent = async (content: string): Promise<ModerationResult> => {
  // √âtape 1: V√©rification locale rapide
  const localResult = checkLocalModeration(content);
  if (!localResult.approved) {
    return localResult;
  }
  
  // √âtape 2: V√©rification IA si le contenu passe la mod√©ration locale
  const aiResult = await checkAIModeration(content);
  return aiResult;
};